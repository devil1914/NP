TCP Server (server.c):
#include <stdio.h> #include <stdlib.h>
 #include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#define PORT 8080
#define MAX_BUFFER_SIZE 1024 void reverseString(char* str) {
int length = strlen(str);
for (int i = 0; i < length / 2; i++) {
char temp = str[i];
str[i] = str[length - i - 1]; str[length - i - 1] = temp;
} }
int main() {
int server_fd, new_socket;
struct sockaddr_in address;
int opt = 1;
int addrlen = sizeof(address);
char buffer[MAX_BUFFER_SIZE] = {0};
// Creating socket file descriptor
if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
perror("Socket creation failed");
exit(EXIT_FAILURE); }
// Forcefully attaching socket to the port 8080
if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
perror("setsockopt");
exit(EXIT_FAILURE); }

 address.sin_family = AF_INET;
address.sin_addr.s_addr = INADDR_ANY;
address.sin_port = htons(PORT);
// Forcefully attaching socket to the port 8080
if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
perror("Bind failed");
exit(EXIT_FAILURE); }
if (listen(server_fd, 3) < 0) { perror("Listen failed"); exit(EXIT_FAILURE);
}
if ((new_socket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen)) < 0) {
perror("Accept failed");
exit(EXIT_FAILURE); }
// Receive data from client
read(new_socket, buffer, MAX_BUFFER_SIZE); printf("Received from client: %s\n", buffer);
// Reverse the string
reverseString(buffer);
// Send reversed string back to client send(new_socket, buffer, strlen(buffer), 0); printf("Reversed string sent to client: %s\n", buffer); return 0;
}

 TCP Client (client.c): #include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#define PORT 8080
#define MAX_BUFFER_SIZE 1024 int main() {
int sock = 0;
struct sockaddr_in serv_addr;
char buffer[MAX_BUFFER_SIZE] = {0};
// Creating socket
if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
printf("\n Socket creation error \n");
return -1; }
serv_addr.sin_family = AF_INET;
serv_addr.sin_port = htons(PORT);
// Convert IPv4 and IPv6 addresses from text to binary form
if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
printf("\nInvalid address/ Address not supported \n");
return -1; }
// Connect to the server
if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {

 printf("\nConnection Failed \n");
return -1; }
// Get user input
printf("Enter a sentence: ");
fgets(buffer, MAX_BUFFER_SIZE, stdin);
// Send data to the server
send(sock, buffer, strlen(buffer), 0);
printf("Sent to server: %s\n", buffer);
// Receive reversed string from server
read(sock, buffer, MAX_BUFFER_SIZE);
printf("Reversed string received from server: %s\n", buffer);
return 0; }
0UTPUT:-
gcc server.c -o server
gcc client.c -o client
Run the server in one terminal window: ./server
Run the client in another terminal window: ./client
SERVER OUTPUT:
Socket creation successful
Bind successful
Listening for incoming connections... Waiting for connection...
Connection accepted from 127.0.0.1 Received from client: Hello, World! Reversed string sent to client: !dlroW ,olleH

CLIENT OUTPUT:
Socket creation successful
Connection to server successful
Enter a sentence: Hello, World!
Sent to server: Hello, World!
Reversed string received from server: !dlroW ,olleH
